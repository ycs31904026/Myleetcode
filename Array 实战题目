//283 移动零
//给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。
//输入: [0,1,0,3,12]
//输出: [1,3,12,0,0]
//优解、双指针，两次遍历，时间复杂度o(n),空间复杂度o(1);
public void moveZeroes(int[] nums){
  //特殊判断
  if(nums == null) return;
  //第一次循环将非零元素前移
  int j = 0;
  for(int i = 0; i < nums.length; i++) {
    if(nums[i] != 0) {
      nums[j] =nums[i];
      j++;
    }
  }
  //第二次循环将剩下的元素写成0
  for(int i = j; i < nums.length; i++) {
    nums[i] = 0;
  }
}
//快速排序的思想：选取一个分割元素0，将所有不等于0的元素放在0的左边
    //使用两个指针，只要是元素不等于零，就与交换0交换
    /*public void moveZeroes(int[] nums) {
        //特殊判断
        if (nums == null) {
            return;
        }
        //使用一个指针标记0
        int j = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                int temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
                j++;
            }
        }
    }*/
    //用一次循环，两个指针
    public void moveZeroes(int[] nums) {
        //特殊判断
        if (nums == null) {
            return;
        }
        //使用j标记非零元素的位置
        int j = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                nums[j] = nums[i];
                if (j != i) {
                    nums[i] = 0;
                }
                j++;
            }
        }
    }
